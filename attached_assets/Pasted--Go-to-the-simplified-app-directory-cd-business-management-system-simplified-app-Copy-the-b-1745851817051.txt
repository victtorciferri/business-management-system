# Go to the simplified app directory
cd ~/business-management-system/simplified-app

# Copy the built assets from your main project
# First, check if they exist
ls -la ~/business-management-system/dist/public

# Create the directory structure and copy the assets
mkdir -p dist/public
cp -r ~/business-management-system/dist/public/* dist/public/ || echo "No assets found to copy"

# Now update the server code to handle API routes
cat > index.js << 'EOF'
const express = require('express');
const fs = require('fs');
const path = require('path');
const { Pool } = require('pg');
const app = express();
const port = process.env.PORT || 8080;

// Database connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

// Test database connection
async function testDbConnection() {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW()');
    console.log('Database connection successful:', result.rows[0]);
    client.release();
    return true;
  } catch (err) {
    console.error('Database connection error:', err);
    return false;
  }
}

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Serve static files from the dist/public directory
const publicDir = path.join(__dirname, 'dist/public');
if (fs.existsSync(publicDir)) {
  console.log('Serving static files from:', publicDir);
  app.use(express.static(publicDir));
} else {
  console.log('Public directory not found:', publicDir);
}

// Basic API endpoints
app.get('/api/status', async (req, res) => {
  const dbConnected = await testDbConnection();
  res.json({
    status: 'online',
    environment: process.env.NODE_ENV,
    databaseConnected: dbConnected,
    version: '1.0.0'
  });
});

// API routes
app.get('/api/themes', async (req, res) => {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT * FROM themes LIMIT 10');
    res.json(result.rows);
    client.release();
  } catch (err) {
    console.error('Error querying themes:', err);
    res.status(500).json({ error: 'Database error', message: err.message });
  }
});

app.get('/api/user', (req, res) => {
  // Simulating unauthenticated response for now
  res.status(401).json({ message: 'Not authenticated' });
});

// Default route for SPA
app.get('*', (req, res) => {
  // If API route not found, serve the index.html for SPA routing
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ error: 'API endpoint not found' });
  }
  
  const indexPath = path.join(publicDir, 'index.html');
  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath);
  } else {
    // Fallback to a simple HTML page
    res.send(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>AppointEase</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            h1 { color: #333; }
            .container { max-width: 800px; margin: 0 auto; }
            .status { padding: 20px; background: #f4f4f4; border-radius: 5px; }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>AppointEase</h1>
            <div class="status">
              <h2>Server Status</h2>
              <p>The AppointEase server is running.</p>
              <p>Environment: ${process.env.NODE_ENV || 'development'}</p>
              <p>Frontend assets not found. Please build the frontend.</p>
            </div>
          </div>
        </body>
      </html>
    `);
  }
});

// Start the server
app.listen(port, '0.0.0.0', async () => {
  console.log(`AppointEase server listening on port ${port}`);
  
  // Test database connection on startup
  await testDbConnection();
});
EOF

# Update package.json to include pg
cat > package.json << 'EOF'
{
  "name": "appointease",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "pg": "^8.11.0"
  }
}
EOF

# Deploy the updated application
gcloud run deploy appointease \
  --source . \
  --region=southamerica-west1 \
  --platform=managed \
  --allow-unauthenticated \
  --set-env-vars="NODE_ENV=production" \
  --update-secrets="DATABASE_URL=database-url:latest"